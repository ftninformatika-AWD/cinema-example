// <auto-generated />
using System;
using CinemaBasicExample.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CinemaBasicExample.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250411074811_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CinemaBasicExample.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sci-Fi"
                        });
                });

            modelBuilder.Entity("CinemaBasicExample.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Duration = 120,
                            GenreId = 3,
                            Name = "Eclipse of Shadows"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Duration = 110,
                            GenreId = 2,
                            Name = "The Last Horizon"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Duration = 130,
                            GenreId = 5,
                            Name = "Whispers of the Wind"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Duration = 140,
                            GenreId = 4,
                            Name = "Crimson Tide Rising"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Duration = 100,
                            GenreId = 1,
                            Name = "Echoes of Eternity"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Duration = 150,
                            GenreId = 2,
                            Name = "Into the Depths"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Duration = 125,
                            GenreId = 3,
                            Name = "Starlight Chronicles"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Duration = 95,
                            GenreId = 4,
                            Name = "The Forgotten Realm"
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            Duration = 105,
                            GenreId = 3,
                            Name = "Beyond the Veil"
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            Duration = 11,
                            GenreId = 1,
                            Name = "Shattered Reflections"
                        });
                });

            modelBuilder.Entity("CinemaBasicExample.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("Room")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ScreeningType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TicketPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MovieId = 1,
                            Room = 1,
                            ScheduledAt = new DateTime(2026, 1, 5, 10, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "2D",
                            TicketPrice = 10.0
                        },
                        new
                        {
                            Id = 2,
                            MovieId = 2,
                            Room = 2,
                            ScheduledAt = new DateTime(2026, 1, 6, 12, 30, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "3D",
                            TicketPrice = 12.5
                        },
                        new
                        {
                            Id = 3,
                            MovieId = 3,
                            Room = 3,
                            ScheduledAt = new DateTime(2026, 1, 7, 15, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "IMAX",
                            TicketPrice = 15.0
                        },
                        new
                        {
                            Id = 4,
                            MovieId = 4,
                            Room = 4,
                            ScheduledAt = new DateTime(2026, 1, 8, 18, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "4D",
                            TicketPrice = 20.0
                        },
                        new
                        {
                            Id = 5,
                            MovieId = 5,
                            Room = 5,
                            ScheduledAt = new DateTime(2026, 1, 9, 20, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "2D",
                            TicketPrice = 10.0
                        },
                        new
                        {
                            Id = 6,
                            MovieId = 6,
                            Room = 6,
                            ScheduledAt = new DateTime(2026, 2, 1, 11, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "3D",
                            TicketPrice = 12.5
                        },
                        new
                        {
                            Id = 7,
                            MovieId = 7,
                            Room = 7,
                            ScheduledAt = new DateTime(2026, 2, 2, 13, 30, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "IMAX",
                            TicketPrice = 15.0
                        },
                        new
                        {
                            Id = 8,
                            MovieId = 8,
                            Room = 8,
                            ScheduledAt = new DateTime(2026, 2, 3, 16, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "4D",
                            TicketPrice = 20.0
                        },
                        new
                        {
                            Id = 9,
                            MovieId = 9,
                            Room = 1,
                            ScheduledAt = new DateTime(2026, 2, 4, 19, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "2D",
                            TicketPrice = 10.0
                        },
                        new
                        {
                            Id = 10,
                            MovieId = 10,
                            Room = 2,
                            ScheduledAt = new DateTime(2026, 2, 5, 21, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "3D",
                            TicketPrice = 12.5
                        },
                        new
                        {
                            Id = 11,
                            MovieId = 1,
                            Room = 3,
                            ScheduledAt = new DateTime(2026, 3, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "IMAX",
                            TicketPrice = 15.0
                        },
                        new
                        {
                            Id = 12,
                            MovieId = 2,
                            Room = 4,
                            ScheduledAt = new DateTime(2026, 3, 2, 12, 30, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "4D",
                            TicketPrice = 20.0
                        },
                        new
                        {
                            Id = 13,
                            MovieId = 3,
                            Room = 5,
                            ScheduledAt = new DateTime(2026, 3, 3, 15, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "2D",
                            TicketPrice = 10.0
                        },
                        new
                        {
                            Id = 14,
                            MovieId = 4,
                            Room = 6,
                            ScheduledAt = new DateTime(2026, 3, 4, 18, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "3D",
                            TicketPrice = 12.5
                        },
                        new
                        {
                            Id = 15,
                            MovieId = 5,
                            Room = 7,
                            ScheduledAt = new DateTime(2026, 3, 5, 20, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "IMAX",
                            TicketPrice = 15.0
                        },
                        new
                        {
                            Id = 16,
                            MovieId = 6,
                            Room = 8,
                            ScheduledAt = new DateTime(2026, 4, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "4D",
                            TicketPrice = 20.0
                        },
                        new
                        {
                            Id = 17,
                            MovieId = 7,
                            Room = 1,
                            ScheduledAt = new DateTime(2026, 4, 2, 13, 30, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "2D",
                            TicketPrice = 10.0
                        },
                        new
                        {
                            Id = 18,
                            MovieId = 8,
                            Room = 2,
                            ScheduledAt = new DateTime(2026, 4, 3, 16, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "3D",
                            TicketPrice = 12.5
                        },
                        new
                        {
                            Id = 19,
                            MovieId = 9,
                            Room = 3,
                            ScheduledAt = new DateTime(2026, 4, 4, 19, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "IMAX",
                            TicketPrice = 15.0
                        },
                        new
                        {
                            Id = 20,
                            MovieId = 10,
                            Room = 4,
                            ScheduledAt = new DateTime(2026, 4, 5, 21, 0, 0, 0, DateTimeKind.Utc),
                            ScreeningType = "4D",
                            TicketPrice = 20.0
                        });
                });

            modelBuilder.Entity("CinemaBasicExample.Models.Movie", b =>
                {
                    b.HasOne("CinemaBasicExample.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("CinemaBasicExample.Models.Screening", b =>
                {
                    b.HasOne("CinemaBasicExample.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CinemaBasicExample.Models.Genre", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
